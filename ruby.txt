Devpoint Labs May 21

People have been using program for years. Egyptians, abacus etc…
Computers understand binary, 1 and 0s. Electrical connection turns the board on or off.
A programming language is very similar to spoken language
Computers are stupid they can’t do a thing without us
You have to talk to the computer like it is the stupidest thing
Think of the process that you go through in the morning. Try describing every single little detail of the process.
Programming language helps to not have to be as explicit as before

How do bugs get in software? People put them there. All software is broken. Not a single piece of software is flawless.
High level languages make people lazy so they will do whatever is 'good enough’ to function.
By putting the bugs in the software we are in a way providing ourselves with job security

iphone apps are all built in Objective-C
android apps are built with Java
website html css
fancy things java script
API other backend language

Programming Paradigms

Procedural - top down
Object Oriented - manipulating objects
Functional - relies on functions
Declarative - like SQL
Others….

What is Ruby?

Ruby Ideals
Blended Perl, Smalltalk, Eiffel, Ada, and Lisp
balance Functional & Imperative
Natural over simple
Expressive and beautiful

Benefits

Developer happiness
Reads like english
Easy to learn
Forgiving
Simple
Large helpful community

**if the thing that you are doing is making you angry, you are doing it wrong

Issues

Super high level = slow(ish)		computer time not human time
high memory footprint (getting a lot better with 2.1)
Language as an art

Check These Out

google sketchup
motorola test labs
nasa simulations
morpha robotics
lucent 3g wireless
level 3 communications
sysadmin
rig maker xv
las vegas downtown casino table games
league of legends scale and deployment
twitter, hulu, github, groupon, living social, 90% of startups

~ is the home directory shortcut in terminal
irb is interactive ruby
“ “ is a string
a string is a data type
the numbers are also a data type
the data types are our building blocks to work with Ruby
Numbers and Strings are what we use most in Ruby
concatenation - taking two strings and putting them together into one string
“string” * Number works but not Number * “string”
2 is a fixnum
2.5 is a float
Fixnum / Fixnum = Fixnum
Float / Float = Float
Fixnum / Float = Float
Float / Fixnum = Float
“Justin Ruiz”.class will show that the string is a string

Data Types
String
Fixnum
Float

method chaining “justin ruiz”.reverse.upcase

name = “justin”

variable assignment string

in programming, read right to left

Variable RULES
all lowercase
begin with a letter
separate words with_

Git Config

git config —global user.name “justindruiz”
git config —global user.email “justinruizwrestling@gmail.com”

GIT

changed files and pushed to master
changed files and pushed to collaborator
pulled files from collaborator
created a new branch and added a message to it
merge branch to master

May 22

Devpoint Labs May 22

Programming is talking to the machine to tell it what to do because the machine is stupid.

“hello, world”
‘hello, world’

‘you don\’t want to do that - add backslash so single quote works
“you don’t want to do that”

Use double quotes as opposed to single quotes

“this” +  “ “  + “that”
name = “Jeremy”

“Hello, “ + name +  “. How are you?”
“Hello, #{name}, How are you?"
"string interpolation"

'Hello, #{name}. How are you?'  -This doesn't work. Don't use single quotes if you want
special characters to do something.

"Hello\nJeremy" this will print Jeremy on a new line
'Hello\nJeremy' this will print what is exactly in the quotes

__________________________________________________________________________________________

"Array" [] - iteration over an array. Class exercise, asking a person a number one by one.
["Jeremy", "Will", "Ty", "Jason", "Nhi"]
[] [] [] [] []  Storage Bins
 0  1  2  3  4
 J     T

storage = ["Jeremy", "Will", "Ty", "Jason", "Nhi"]

puts storage[0]

puts storage[0].class

puts storage[0].reverse


Programming is talking to the machine to tell it what to do because the machine is stupid.

“hello, world”
‘hello, world’

‘you don\’t want to do that - add backslash so single quote works
“you don’t want to do that”

Use double quotes as opposed to single quotes

“this” +  “ “  + “that”
name = “Jeremy”

“Hello, “ + name +  “. How are you?”
“Hello, #{name}, How are you?”

App Idea
Have an app that will compile a list of names and put videos together of all those people. Wrestlers. Good for scouting.

Would you give up a current job opportunity to work at your current job?


storage = [ "Jason", "Jeremy", "Ty", "Will", "Nhi" ]

puts storage[0]

people = [ "Jason", "Jeremy", "Ty", "Will", "Nhi" ]

people.each do |person|
 puts person
 puts person.reverse
 puts person.upcase
 puts people[3]
end

things = [1, 2, 3]

things.each do |number|
 puts number * number
end

You can put arrays in an array
An Example:
Products = [[Men's shirts], [Women's shirts], [kids shirts]]

tic_tac_toe =
[
["", "", ""],
["", "", ""],
["", "", ""]
]

first few characters of a word + tab will auto finish words for you
_______________________________________________________________
Variables Variables Variables Variables
_______________________________________________________________
local_variable = "hello"

@instance_variable = "Jeremy"

@@class_variable = "Human"

$global_variable = "DO NOT USE"

concept of scoping for example iteration 0 first 1 second 2 third etc...

These variables are ordered from top to bottom in the frequency with which they are used

Array   0  1  2  3
        [] [] [] []
Hash  box1  2  3  4

hash is a set of key value pairs
key any valid ruby object
value any valid ruby object


storage = {"Box 1" => "Stuff", "Box2" => "More stuff"}

puts storage["Box 1"]

variable = {"Key" => "Value"} *This is how the hash is set up
*each key needs to be unique
indexes in an array it's 0 based, in a hash it's key based

storage = {"Jeremy" => "Stuff", "Ty" => "More stuff", "Will" =>
["box", "of", "stuff"]}

storage.each_pair do |key, value|

puts "The key is #{key} and the value is #{value}"

end

************apidock.com/ruby *************REALLY IMPORTANT!!!!!!!
_______________________________________________________________
SYMBOLS = Datatype
__________________________________________________________

:name

You see symbols a lot in hashes

me = {:name => "Jeremy", :age => 32, :height => "tall",
:weight => "fat at heart"}

puts me[:name]

me[:sex] (get a value)
me[:sex] = "Yes, please" (set a value)

{'food' => 'taco'}
{:food => "taco"}  \___ Use these two
{food: 'taco'}     /===

{'data-url' => 'http://www.google.com'}
{:data-url => 'http://www.google.com'} in this case not valid

When do you use an array versus hash

array for generic collections
hash is for a more specific collection

dogs = [
  {name: 'soldier', breed: 'mutt', age: 2},
  {name: 'sam', breed: 'bassett', age: 8}
]

person = {
  name: 'jeremy',
  friends: ['nhi', 'ty'],
  enemies: ['bum across the street', 'his friend']
}

_______________________________________________________________
Time              Another Data Type
_______________________________________________________________

Time.now  needs to be capitalized
Time.now.year
Time.now.month
Time.now.day
Time.now.hour
Time.now.min
Time.now.sec
